#!/usr/bin/env python

import argparse
import glob
import os
import sys

from simplebdd import Test, Output, HTMLOutput


def imports_by_path(path):
    fpath, fn = os.path.split(path)
    if fn.endswith('.py'):
        path = fpath
        fns = [fn]
    else:
        fns = [os.path.basename(x) for x in glob.glob(os.path.join(path, '*.py'))]
    
    # needs to be at front or test.py wont work
    sys.path.insert(0, path) 
    
    return [__import__(fn[:-3]) for fn in fns]


def cli():
    p = argparse.ArgumentParser()
    p.description = "A simple implementation of a behaviour-driven development style testing framework."
    p.add_argument("test", nargs=1, help="Test file or directory")
    p.add_argument("--html", action="store_true", help="Output HTML")
    p.add_argument("-q", "--quiet", action="store_true", help="Silent mode")

    args = p.parse_args()
    output = HTMLOutput() if args.html else Output()

    modules = imports_by_path(args.test[0])
    exit_code = 0
    for module in modules:
        tests = []

        for x in dir(module):
            y = getattr(module, x)
            try:
                if Test in y.__bases__:
                    tests.append(y)
            except:
                pass

        for test in tests:
            instance = test()
            instance.run(output)
            if instance.fails > 0:
                exit_code = 1
    return exit_code


if __name__ == "__main__":
    sys.exit(cli())
